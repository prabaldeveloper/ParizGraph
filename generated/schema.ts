// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VenueList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VenueList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VenueList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VenueList", id.toString(), this);
  }

  static load(id: string): VenueList | null {
    return store.get("VenueList", id) as VenueList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get venueId(): BigInt {
    let value = this.get("venueId");
    return value.toBigInt();
  }

  set venueId(value: BigInt) {
    this.set("venueId", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    return value.toString();
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get totalCapacity(): BigInt {
    let value = this.get("totalCapacity");
    return value.toBigInt();
  }

  set totalCapacity(value: BigInt) {
    this.set("totalCapacity", Value.fromBigInt(value));
  }

  get rentalAmount(): BigInt {
    let value = this.get("rentalAmount");
    return value.toBigInt();
  }

  set rentalAmount(value: BigInt) {
    this.set("rentalAmount", Value.fromBigInt(value));
  }

  get tokenCID(): string {
    let value = this.get("tokenCID");
    return value.toString();
  }

  set tokenCID(value: string) {
    this.set("tokenCID", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Erc20TokenVenue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Erc20TokenVenue entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Erc20TokenVenue entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Erc20TokenVenue", id.toString(), this);
  }

  static load(id: string): Erc20TokenVenue | null {
    return store.get("Erc20TokenVenue", id) as Erc20TokenVenue | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get status(): boolean {
    let value = this.get("status");
    return value.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenDecimal(): BigInt | null {
    let value = this.get("tokenDecimal");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDecimal(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenDecimal");
    } else {
      this.set("tokenDecimal", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EventList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EventList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EventList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EventList", id.toString(), this);
  }

  static load(id: string): EventList | null {
    return store.get("EventList", id) as EventList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get venueTokenId(): BigInt | null {
    let value = this.get("venueTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set venueTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("venueTokenId");
    } else {
      this.set("venueTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventName(): string | null {
    let value = this.get("eventName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventName(value: string | null) {
    if (value === null) {
      this.unset("eventName");
    } else {
      this.set("eventName", Value.fromString(value as string));
    }
  }

  get eventCategory(): string | null {
    let value = this.get("eventCategory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventCategory(value: string | null) {
    if (value === null) {
      this.unset("eventCategory");
    } else {
      this.set("eventCategory", Value.fromString(value as string));
    }
  }

  get eventDescription(): string | null {
    let value = this.get("eventDescription");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventDescription(value: string | null) {
    if (value === null) {
      this.unset("eventDescription");
    } else {
      this.set("eventDescription", Value.fromString(value as string));
    }
  }

  get eventStartTime(): BigInt | null {
    let value = this.get("eventStartTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventStartTime(value: BigInt | null) {
    if (value === null) {
      this.unset("eventStartTime");
    } else {
      this.set("eventStartTime", Value.fromBigInt(value as BigInt));
    }
  }

  get eventEndTime(): BigInt | null {
    let value = this.get("eventEndTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventEndTime(value: BigInt | null) {
    if (value === null) {
      this.unset("eventEndTime");
    } else {
      this.set("eventEndTime", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenCID(): string | null {
    let value = this.get("tokenCID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenCID(value: string | null) {
    if (value === null) {
      this.unset("tokenCID");
    } else {
      this.set("tokenCID", Value.fromString(value as string));
    }
  }

  get isVenueFeesPaid(): boolean {
    let value = this.get("isVenueFeesPaid");
    return value.toBoolean();
  }

  set isVenueFeesPaid(value: boolean) {
    this.set("isVenueFeesPaid", Value.fromBoolean(value));
  }

  get isPaid(): boolean {
    let value = this.get("isPaid");
    return value.toBoolean();
  }

  set isPaid(value: boolean) {
    this.set("isPaid", Value.fromBoolean(value));
  }

  get ticketPrice(): BigInt | null {
    let value = this.get("ticketPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketPrice");
    } else {
      this.set("ticketPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get transactionHash(): string | null {
    let value = this.get("transactionHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string | null) {
    if (value === null) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get eventOrganiserAddress(): Bytes | null {
    let value = this.get("eventOrganiserAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set eventOrganiserAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("eventOrganiserAddress");
    } else {
      this.set("eventOrganiserAddress", Value.fromBytes(value as Bytes));
    }
  }

  get isFeatured(): boolean {
    let value = this.get("isFeatured");
    return value.toBoolean();
  }

  set isFeatured(value: boolean) {
    this.set("isFeatured", Value.fromBoolean(value));
  }

  get eventStatus(): string | null {
    let value = this.get("eventStatus");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventStatus(value: string | null) {
    if (value === null) {
      this.unset("eventStatus");
    } else {
      this.set("eventStatus", Value.fromString(value as string));
    }
  }

  get participantsList(): Array<Bytes> | null {
    let value = this.get("participantsList");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set participantsList(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("participantsList");
    } else {
      this.set("participantsList", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get ticketBoughtAddress(): Array<Bytes> | null {
    let value = this.get("ticketBoughtAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set ticketBoughtAddress(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("ticketBoughtAddress");
    } else {
      this.set(
        "ticketBoughtAddress",
        Value.fromBytesArray(value as Array<Bytes>)
      );
    }
  }
}

export class WhiteList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WhiteList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WhiteList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WhiteList", id.toString(), this);
  }

  static load(id: string): WhiteList | null {
    return store.get("WhiteList", id) as WhiteList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get status(): boolean {
    let value = this.get("status");
    return value.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class Erc20TokenEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Erc20TokenEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Erc20TokenEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Erc20TokenEvent", id.toString(), this);
  }

  static load(id: string): Erc20TokenEvent | null {
    return store.get("Erc20TokenEvent", id) as Erc20TokenEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get status(): boolean {
    let value = this.get("status");
    return value.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenDecimal(): BigInt | null {
    let value = this.get("tokenDecimal");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDecimal(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenDecimal");
    } else {
      this.set("tokenDecimal", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Favourite extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Favourite entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Favourite entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Favourite", id.toString(), this);
  }

  static load(id: string): Favourite | null {
    return store.get("Favourite", id) as Favourite | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get eventTokenId(): Array<BigInt> | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set eventTokenId(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }
}

export class BookedTime extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BookedTime entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BookedTime entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BookedTime", id.toString(), this);
  }

  static load(id: string): BookedTime | null {
    return store.get("BookedTime", id) as BookedTime | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get venueTokenId(): BigInt | null {
    let value = this.get("venueTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set venueTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("venueTokenId");
    } else {
      this.set("venueTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventTokenId(): Array<BigInt> | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set eventTokenId(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get eventStartTime(): Array<BigInt> | null {
    let value = this.get("eventStartTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set eventStartTime(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("eventStartTime");
    } else {
      this.set("eventStartTime", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get eventEndTime(): Array<BigInt> | null {
    let value = this.get("eventEndTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set eventEndTime(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("eventEndTime");
    } else {
      this.set("eventEndTime", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }
}
