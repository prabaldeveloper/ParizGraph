// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURIUpdated extends ethereum.Event {
  get params(): BaseURIUpdated__Params {
    return new BaseURIUpdated__Params(this);
  }
}

export class BaseURIUpdated__Params {
  _event: BaseURIUpdated;

  constructor(event: BaseURIUpdated) {
    this._event = event;
  }

  get baseURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Bought extends ethereum.Event {
  get params(): Bought__Params {
    return new Bought__Params(this);
  }
}

export class Bought__Params {
  _event: Bought;

  constructor(event: Bought) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ConversionContractUpdated extends ethereum.Event {
  get params(): ConversionContractUpdated__Params {
    return new ConversionContractUpdated__Params(this);
  }
}

export class ConversionContractUpdated__Params {
  _event: ConversionContractUpdated;

  constructor(event: ConversionContractUpdated) {
    this._event = event;
  }

  get conversionContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DescriptionUpdated extends ethereum.Event {
  get params(): DescriptionUpdated__Params {
    return new DescriptionUpdated__Params(this);
  }
}

export class DescriptionUpdated__Params {
  _event: DescriptionUpdated;

  constructor(event: DescriptionUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DeviationPercentage extends ethereum.Event {
  get params(): DeviationPercentage__Params {
    return new DeviationPercentage__Params(this);
  }
}

export class DeviationPercentage__Params {
  _event: DeviationPercentage;

  constructor(event: DeviationPercentage) {
    this._event = event;
  }

  get percentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ERC20TokenUpdated extends ethereum.Event {
  get params(): ERC20TokenUpdated__Params {
    return new ERC20TokenUpdated__Params(this);
  }
}

export class ERC20TokenUpdated__Params {
  _event: ERC20TokenUpdated;

  constructor(event: ERC20TokenUpdated) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class EventAdded extends ethereum.Event {
  get params(): EventAdded__Params {
    return new EventAdded__Params(this);
  }
}

export class EventAdded__Params {
  _event: EventAdded;

  constructor(event: EventAdded) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get category(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get startTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tokenCID(): string {
    return this._event.parameters[6].value.toString();
  }

  get venueTokenId(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get isVenueFeesPaid(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get isEventPaid(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }

  get eventOrganiser(): Address {
    return this._event.parameters[10].value.toAddress();
  }

  get ticketPrice(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }
}

export class Favourite extends ethereum.Event {
  get params(): Favourite__Params {
    return new Favourite__Params(this);
  }
}

export class Favourite__Params {
  _event: Favourite;

  constructor(event: Favourite) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isFavourite(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Featured extends ethereum.Event {
  get params(): Featured__Params {
    return new Featured__Params(this);
  }
}

export class Featured__Params {
  _event: Featured;

  constructor(event: Featured) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isFeatured(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Joined extends ethereum.Event {
  get params(): Joined__Params {
    return new Joined__Params(this);
  }
}

export class Joined__Params {
  _event: Joined;

  constructor(event: Joined) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get indexedTokenIPFSPath(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get tokenIPFSPath(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class NFTMetadataUpdated extends ethereum.Event {
  get params(): NFTMetadataUpdated__Params {
    return new NFTMetadataUpdated__Params(this);
  }
}

export class NFTMetadataUpdated__Params {
  _event: NFTMetadataUpdated;

  constructor(event: NFTMetadataUpdated) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[1].value.toString();
  }

  get baseURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StartTimeupdated extends ethereum.Event {
  get params(): StartTimeupdated__Params {
    return new StartTimeupdated__Params(this);
  }
}

export class StartTimeupdated__Params {
  _event: StartTimeupdated;

  constructor(event: StartTimeupdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenCreatorUpdated extends ethereum.Event {
  get params(): TokenCreatorUpdated__Params {
    return new TokenCreatorUpdated__Params(this);
  }
}

export class TokenCreatorUpdated__Params {
  _event: TokenCreatorUpdated;

  constructor(event: TokenCreatorUpdated) {
    this._event = event;
  }

  get fromCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toCreator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenIPFSPathUpdated extends ethereum.Event {
  get params(): TokenIPFSPathUpdated__Params {
    return new TokenIPFSPathUpdated__Params(this);
  }
}

export class TokenIPFSPathUpdated__Params {
  _event: TokenIPFSPathUpdated;

  constructor(event: TokenIPFSPathUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenCID(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VenueContractUpdated extends ethereum.Event {
  get params(): VenueContractUpdated__Params {
    return new VenueContractUpdated__Params(this);
  }
}

export class VenueContractUpdated__Params {
  _event: VenueContractUpdated;

  constructor(event: VenueContractUpdated) {
    this._event = event;
  }

  get venueContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WhiteList extends ethereum.Event {
  get params(): WhiteList__Params {
    return new WhiteList__Params(this);
  }
}

export class WhiteList__Params {
  _event: WhiteList;

  constructor(event: WhiteList) {
    this._event = event;
  }

  get whiteListedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class events__getInfoResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: BigInt;
  value6: string;
  value7: BigInt;
  value8: Address;
  value9: boolean;
  value10: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: BigInt,
    value6: string,
    value7: BigInt,
    value8: Address,
    value9: boolean,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class events extends ethereum.SmartContract {
  static bind(address: Address): events {
    return new events("events", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  erc20TokenStatus(param0: Address): boolean {
    let result = super.call(
      "erc20TokenStatus",
      "erc20TokenStatus(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_erc20TokenStatus(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "erc20TokenStatus",
      "erc20TokenStatus(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  eventsInVenue(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "eventsInVenue",
      "eventsInVenue(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_eventsInVenue(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "eventsInVenue",
      "eventsInVenue(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  favouriteEvents(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "favouriteEvents",
      "favouriteEvents(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_favouriteEvents(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "favouriteEvents",
      "favouriteEvents(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  featuredEvents(param0: BigInt): boolean {
    let result = super.call(
      "featuredEvents",
      "featuredEvents(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_featuredEvents(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "featuredEvents",
      "featuredEvents(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getConversionContract(): Address {
    let result = super.call(
      "getConversionContract",
      "getConversionContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getConversionContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getConversionContract",
      "getConversionContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeviationPercentage(): BigInt {
    let result = super.call(
      "getDeviationPercentage",
      "getDeviationPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDeviationPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeviationPercentage",
      "getDeviationPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHasCreatorMintedIPFSHash(
    creator: Address,
    tokenIPFSPath: string
  ): boolean {
    let result = super.call(
      "getHasCreatorMintedIPFSHash",
      "getHasCreatorMintedIPFSHash(address,string):(bool)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(tokenIPFSPath)
      ]
    );

    return result[0].toBoolean();
  }

  try_getHasCreatorMintedIPFSHash(
    creator: Address,
    tokenIPFSPath: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getHasCreatorMintedIPFSHash",
      "getHasCreatorMintedIPFSHash(address,string):(bool)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(tokenIPFSPath)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getInfo(param0: BigInt): events__getInfoResult {
    let result = super.call(
      "getInfo",
      "getInfo(uint256):(uint256,string,string,string,uint256,uint256,string,uint256,address,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new events__getInfoResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toString(),
      result[7].toBigInt(),
      result[8].toAddress(),
      result[9].toBoolean(),
      result[10].toBigInt()
    );
  }

  try_getInfo(param0: BigInt): ethereum.CallResult<events__getInfoResult> {
    let result = super.tryCall(
      "getInfo",
      "getInfo(uint256):(uint256,string,string,string,uint256,uint256,string,uint256,address,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new events__getInfoResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toString(),
        value[7].toBigInt(),
        value[8].toAddress(),
        value[9].toBoolean(),
        value[10].toBigInt()
      )
    );
  }

  getNextTokenId(): BigInt {
    let result = super.call("getNextTokenId", "getNextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextTokenId",
      "getNextTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenCID(tokenId: BigInt): string {
    let result = super.call("getTokenCID", "getTokenCID(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_getTokenCID(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getTokenCID", "getTokenCID(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getVenueContract(): Address {
    let result = super.call(
      "getVenueContract",
      "getVenueContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getVenueContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVenueContract",
      "getVenueContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ticketBoughtAddress(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "ticketBoughtAddress",
      "ticketBoughtAddress(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_ticketBoughtAddress(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "ticketBoughtAddress",
      "ticketBoughtAddress(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ticketSold(param0: BigInt): BigInt {
    let result = super.call("ticketSold", "ticketSold(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ticketSold(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ticketSold", "ticketSold(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenCreator(tokenId: BigInt): Address {
    let result = super.call("tokenCreator", "tokenCreator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_tokenCreator(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenCreator",
      "tokenCreator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  whiteListedAddress(param0: Address): boolean {
    let result = super.call(
      "whiteListedAddress",
      "whiteListedAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_whiteListedAddress(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whiteListedAddress",
      "whiteListedAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get category(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get tokenCID(): string {
    return this._call.inputValues[5].value.toString();
  }

  get venueTokenId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get payNow(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get venueFeeAmount(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get isEventPaid(): boolean {
    return this._call.inputValues[10].value.toBoolean();
  }

  get ticketPrice(): BigInt {
    return this._call.inputValues[11].value.toBigInt();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BuyTicketCall extends ethereum.Call {
  get inputs(): BuyTicketCall__Inputs {
    return new BuyTicketCall__Inputs(this);
  }

  get outputs(): BuyTicketCall__Outputs {
    return new BuyTicketCall__Outputs(this);
  }
}

export class BuyTicketCall__Inputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ticketPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyTicketCall__Outputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }
}

export class FavouriteCall extends ethereum.Call {
  get inputs(): FavouriteCall__Inputs {
    return new FavouriteCall__Inputs(this);
  }

  get outputs(): FavouriteCall__Outputs {
    return new FavouriteCall__Outputs(this);
  }
}

export class FavouriteCall__Inputs {
  _call: FavouriteCall;

  constructor(call: FavouriteCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isFavourite(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class FavouriteCall__Outputs {
  _call: FavouriteCall;

  constructor(call: FavouriteCall) {
    this._call = call;
  }
}

export class FeaturedCall extends ethereum.Call {
  get inputs(): FeaturedCall__Inputs {
    return new FeaturedCall__Inputs(this);
  }

  get outputs(): FeaturedCall__Outputs {
    return new FeaturedCall__Outputs(this);
  }
}

export class FeaturedCall__Inputs {
  _call: FeaturedCall;

  constructor(call: FeaturedCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isFeatured(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class FeaturedCall__Outputs {
  _call: FeaturedCall;

  constructor(call: FeaturedCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateConversionContractCall extends ethereum.Call {
  get inputs(): UpdateConversionContractCall__Inputs {
    return new UpdateConversionContractCall__Inputs(this);
  }

  get outputs(): UpdateConversionContractCall__Outputs {
    return new UpdateConversionContractCall__Outputs(this);
  }
}

export class UpdateConversionContractCall__Inputs {
  _call: UpdateConversionContractCall;

  constructor(call: UpdateConversionContractCall) {
    this._call = call;
  }

  get _conversionContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateConversionContractCall__Outputs {
  _call: UpdateConversionContractCall;

  constructor(call: UpdateConversionContractCall) {
    this._call = call;
  }
}

export class UpdateDescriptionCall extends ethereum.Call {
  get inputs(): UpdateDescriptionCall__Inputs {
    return new UpdateDescriptionCall__Inputs(this);
  }

  get outputs(): UpdateDescriptionCall__Outputs {
    return new UpdateDescriptionCall__Outputs(this);
  }
}

export class UpdateDescriptionCall__Inputs {
  _call: UpdateDescriptionCall;

  constructor(call: UpdateDescriptionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateDescriptionCall__Outputs {
  _call: UpdateDescriptionCall;

  constructor(call: UpdateDescriptionCall) {
    this._call = call;
  }
}

export class UpdateDeviationCall extends ethereum.Call {
  get inputs(): UpdateDeviationCall__Inputs {
    return new UpdateDeviationCall__Inputs(this);
  }

  get outputs(): UpdateDeviationCall__Outputs {
    return new UpdateDeviationCall__Outputs(this);
  }
}

export class UpdateDeviationCall__Inputs {
  _call: UpdateDeviationCall;

  constructor(call: UpdateDeviationCall) {
    this._call = call;
  }

  get _deviationPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDeviationCall__Outputs {
  _call: UpdateDeviationCall;

  constructor(call: UpdateDeviationCall) {
    this._call = call;
  }
}

export class UpdateErc20TokenAddressCall extends ethereum.Call {
  get inputs(): UpdateErc20TokenAddressCall__Inputs {
    return new UpdateErc20TokenAddressCall__Inputs(this);
  }

  get outputs(): UpdateErc20TokenAddressCall__Outputs {
    return new UpdateErc20TokenAddressCall__Outputs(this);
  }
}

export class UpdateErc20TokenAddressCall__Inputs {
  _call: UpdateErc20TokenAddressCall;

  constructor(call: UpdateErc20TokenAddressCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateErc20TokenAddressCall__Outputs {
  _call: UpdateErc20TokenAddressCall;

  constructor(call: UpdateErc20TokenAddressCall) {
    this._call = call;
  }
}

export class UpdateStartTimeCall extends ethereum.Call {
  get inputs(): UpdateStartTimeCall__Inputs {
    return new UpdateStartTimeCall__Inputs(this);
  }

  get outputs(): UpdateStartTimeCall__Outputs {
    return new UpdateStartTimeCall__Outputs(this);
  }
}

export class UpdateStartTimeCall__Inputs {
  _call: UpdateStartTimeCall;

  constructor(call: UpdateStartTimeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStartTimeCall__Outputs {
  _call: UpdateStartTimeCall;

  constructor(call: UpdateStartTimeCall) {
    this._call = call;
  }
}

export class UpdateTokenCIDCall extends ethereum.Call {
  get inputs(): UpdateTokenCIDCall__Inputs {
    return new UpdateTokenCIDCall__Inputs(this);
  }

  get outputs(): UpdateTokenCIDCall__Outputs {
    return new UpdateTokenCIDCall__Outputs(this);
  }
}

export class UpdateTokenCIDCall__Inputs {
  _call: UpdateTokenCIDCall;

  constructor(call: UpdateTokenCIDCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenCID(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTokenCIDCall__Outputs {
  _call: UpdateTokenCIDCall;

  constructor(call: UpdateTokenCIDCall) {
    this._call = call;
  }
}

export class UpdateVenueContractCall extends ethereum.Call {
  get inputs(): UpdateVenueContractCall__Inputs {
    return new UpdateVenueContractCall__Inputs(this);
  }

  get outputs(): UpdateVenueContractCall__Outputs {
    return new UpdateVenueContractCall__Outputs(this);
  }
}

export class UpdateVenueContractCall__Inputs {
  _call: UpdateVenueContractCall;

  constructor(call: UpdateVenueContractCall) {
    this._call = call;
  }

  get _venueContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateVenueContractCall__Outputs {
  _call: UpdateVenueContractCall;

  constructor(call: UpdateVenueContractCall) {
    this._call = call;
  }
}

export class UpdateWhitelistCall extends ethereum.Call {
  get inputs(): UpdateWhitelistCall__Inputs {
    return new UpdateWhitelistCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistCall__Outputs {
    return new UpdateWhitelistCall__Outputs(this);
  }
}

export class UpdateWhitelistCall__Inputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }

  get _whitelistAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _status(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class UpdateWhitelistCall__Outputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }
}
